generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id               Int                @id @default(autoincrement())
  email            String?            @unique
  password         String?
  age              Int?
  activity         String?
  gender           String?
  nickname         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  providerId       String?
  provider         Provider
  MerchandiseLikes MerchandiseLikes[]
  PharmacistLikes  PharmacistLikes[]
  postingLikes     PostingLikes[]

  @@unique([provider, providerId])
}

model Pharmacist {
  id                  Int               @id @default(autoincrement())
  email               String            @unique
  password            String?
  pharmacyName        String
  pharmacyAddress     String
  counselingStartTime String?
  counselingEndTime   String?
  userName            String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  Image               Image[]
  PharmacistLikes     PharmacistLikes[]
  Posting             Posting[]
  Comment             Comment[]
}

model PharmacistLikes {
  id           Int        @id @default(autoincrement())
  pharmacistId Int
  customerId   Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  customer     Customer   @relation(fields: [customerId], references: [id])
  pharmacist   Pharmacist @relation(fields: [pharmacistId], references: [id])
}

model Posting {
  id            Int            @id @default(autoincrement())
  title         String
  content       String
  pharmacistId  Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  merchandiseId Int
  merchandise   Merchandise    @relation(fields: [merchandiseId], references: [id])
  pharmacist    Pharmacist     @relation(fields: [pharmacistId], references: [id])
  postingLikes  PostingLikes[]
  PostingToTag  PostingToTag[]
}

model Tag {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  name              String              
  MerchandiseEffect MerchandiseEffect[]
  PostingToTag      PostingToTag[]
}

model PostingToTag {
  id        Int      @id @default(autoincrement())
  tagId     Int
  postingId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posting   Posting  @relation(fields: [postingId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model PostingLikes {
  postingId  Int
  customerId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])
  posting    Posting  @relation(fields: [postingId], references: [id])

  @@id([postingId, customerId])
}

model Merchandise {
  id                        Int                     @id @default(autoincrement())
  companyId                 Int
  company                   Company                 @relation(fields: [companyId], references: [id])
  name                      String
  certification             Boolean                 @default(false)
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  rating                    Float
  Image                     Image[]
  MerchandiseLikes          MerchandiseLikes[]
  Posting                   Posting[]
  MerchandiseEffect         MerchandiseEffect[]
  merchandiseHowToConsume   MerchandiseHowToConsume @relation(fields: [merchandiseHowToConsumeId], references: [id])
  merchandiseHowToConsumeId Int
  Comment                   Comment[]
}

model MerchandiseHowToConsume {
  id          Int           @id @default(autoincrement())
  consumption String
  merchandise Merchandise[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model MerchandiseEffect {
  id            Int         @id @default(autoincrement())
  merchandiseId Int
  tagId         Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  merchandise   Merchandise @relation(fields: [merchandiseId], references: [id])
  tag           Tag         @relation(fields: [tagId], references: [id])
}

model MerchandiseLikes {
  id            Int         @id @default(autoincrement())
  merchandiseId Int
  customerId    Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  customer      Customer    @relation(fields: [customerId], references: [id])
  merchandse    Merchandise @relation(fields: [merchandiseId], references: [id])

  @@unique([merchandiseId, customerId])
}

model Company {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Merchandise Merchandise[]
}

model Image {
  id            Int          @id @default(autoincrement())
  key           String
  url           String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  merchandiseId Int?         @unique
  pharmacistId  Int?
  merchandise   Merchandise? @relation(fields: [merchandiseId], references: [id])
  pharmacist    Pharmacist?  @relation(fields: [pharmacistId], references: [id])
}

model Comment {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  positive      String
  negative      String
  rating        Int
  pharmacistId  Int
  merchandise   Merchandise @relation(fields: [merchandiseId], references: [id])
  Pharmacist    Pharmacist  @relation(fields: [pharmacistId], references: [id])
  merchandiseId Int
}

enum Provider {
  local
  kakao
}
