generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id                 Int                  @id @default(autoincrement())
  email              String?              @unique
  password           String?
  age                Int?
  activity           String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  providerId         String?
  provider           Provider
  gender             Gender?
  isBreastFeed       Boolean              @default(false)
  isPregnant         Boolean              @default(false)
  name               String?
  CustomerDetails    CustomerDetails[]
  MerchandiseLikes   MerchandiseLikes[]
  PharmacistLikes    PharmacistLikes[]
  postingLikes       PostingLikes[]
  TakingMedicine     TakingMedicine[]
  CustomerToConsider CustomerToConsider[]
  CustomerPickUps    CustomerPickUps[]

  @@unique([provider, providerId])
}

model CustomerPickUps {
  id             Int         @id @default(autoincrement())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  customerId     Int
  merchandiseId  Int
  pharmacyName   String
  pharmacyAdress String
  pickableAt     DateTime
  isPicked       Boolean     @default(false)
  customer       Customer    @relation(fields: [customerId], references: [id])
  merchandise    Merchandise @relation(fields: [merchandiseId], references: [id])
}

model CustomerToConsider {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customerId Int
  considerId Int
  customer   Customer @relation(fields: [customerId], references: [id])
  consider   Consider @relation(fields: [considerId], references: [id])
}

model Consider {
  id                 Int                  @id @default(autoincrement())
  name               String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  CustomerToConisder CustomerToConsider[]
}

model CustomerDetails {
  id                          Int                          @id @default(autoincrement())
  customerId                  Int
  takingExcerciseTimePerAWeek TakingExcerciseTimePerAWeek?
  stroke                      Boolean                      @default(false)
  heartDisease                Boolean                      @default(false)
  highBloodPressure           Boolean                      @default(false)
  diabetes                    Boolean                      @default(false)
  etc                         Boolean                      @default(false)
  memo                        String?
  customer                    Customer                     @relation(fields: [customerId], references: [id])
}

model Pharmacist {
  id                  Int               @id @default(autoincrement())
  email               String            @unique
  password            String?
  pharmacyName        String
  pharmacyAddress     String
  counselingStartTime String?
  counselingEndTime   String?
  userName            String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  Comment             Comment[]
  Image               Image[]
  PharmacistLikes     PharmacistLikes[]
  Posting             Posting[]
}

model PharmacistLikes {
  id           Int        @id @default(autoincrement())
  pharmacistId Int
  customerId   Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  customer     Customer   @relation(fields: [customerId], references: [id])
  pharmacist   Pharmacist @relation(fields: [pharmacistId], references: [id])
}

model Posting {
  id                   Int                    @id @default(autoincrement())
  title                String
  content              String
  pharmacistId         Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  pharmacist           Pharmacist             @relation(fields: [pharmacistId], references: [id])
  postingLikes         PostingLikes[]
  PostingToTag         PostingToTag[]
  MerchandiseToPosting MerchandiseToPosting[]
}

model Tag {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  name              String
  MerchandiseEffect MerchandiseEffect[]
  PostingToTag      PostingToTag[]
}

model PostingToTag {
  id        Int      @id @default(autoincrement())
  tagId     Int
  postingId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posting   Posting  @relation(fields: [postingId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model PostingLikes {
  postingId  Int
  customerId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])
  posting    Posting  @relation(fields: [postingId], references: [id])

  @@id([postingId, customerId])
}

model Merchandise {
  id                        Int                       @id @default(autoincrement())
  companyId                 Int
  name                      String
  certification             Boolean                   @default(false)
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  rating                    String
  merchandiseHowToConsumeId Int
  company                   Company                   @relation(fields: [companyId], references: [id])
  merchandiseHowToConsume   MerchandiseHowToConsume   @relation(fields: [merchandiseHowToConsumeId], references: [id])
  Comment                   Comment[]
  Image                     Image?
  MerchandiseEffect         MerchandiseEffect[]
  MerchandiseLikes          MerchandiseLikes[]
  TakingMedicine            TakingMedicine[]
  MerchandiseToPosting      MerchandiseToPosting[]
  CustomerPickUps           CustomerPickUps[]
  MerchandiseToIngredient   MerchandiseToIngredient[]
}

model Ingredient {
  id                      Int                       @id @default(autoincrement())
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  name                    String
  MerchandiseToIngredient MerchandiseToIngredient[]
}

model MerchandiseToIngredient {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  quantity      String?
  mercahndiseId Int
  merchandise   Merchandise @relation(fields: [merchandiseId], references: [id])
  ingredientId  Int
  ingredient    Ingredient  @relation(fields: [ingredientId], references: [id])
  merchandiseId Int
}

model MerchandiseToPosting {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  merchandiseId Int
  postingId     Int
  merchandise   Merchandise @relation(fields: [merchandiseId], references: [id])
  posting       Posting     @relation(fields: [postingId], references: [id])
}

model MerchandiseHowToConsume {
  id          Int           @id @default(autoincrement())
  consumption String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  merchandise Merchandise[]
}

model MerchandiseEffect {
  id            Int         @id @default(autoincrement())
  merchandiseId Int
  tagId         Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  merchandise   Merchandise @relation(fields: [merchandiseId], references: [id])
  tag           Tag         @relation(fields: [tagId], references: [id])
}

model MerchandiseLikes {
  id            Int         @id @default(autoincrement())
  merchandiseId Int
  customerId    Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  customer      Customer    @relation(fields: [customerId], references: [id])
  merchandise   Merchandise @relation(fields: [merchandiseId], references: [id])

  @@unique([merchandiseId, customerId])
}

model Company {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Merchandise Merchandise[]
}

model Image {
  id            Int          @id @default(autoincrement())
  url           String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  merchandiseId Int?         @unique
  pharmacistId  Int?
  key           String
  merchandise   Merchandise? @relation(fields: [merchandiseId], references: [id])
  pharmacist    Pharmacist?  @relation(fields: [pharmacistId], references: [id])
}

model Comment {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  positive      String
  negative      String
  rating        Int
  pharmacistId  Int
  merchandiseId Int
  merchandise   Merchandise @relation(fields: [merchandiseId], references: [id])
  Pharmacist    Pharmacist  @relation(fields: [pharmacistId], references: [id])
}

model TakingMedicine {
  id            Int         @id @default(autoincrement())
  customerId    Int
  merchandiseId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  customer      Customer    @relation(fields: [customerId], references: [id])
  merchandise   Merchandise @relation(fields: [merchandiseId], references: [id])

  @@unique([merchandiseId, customerId])
}

enum TakingExcerciseTimePerAWeek {
  none
  one
  twoOrThree
  fourOrFive
  every
}

enum Gender {
  male
  female
}

enum Provider {
  local
  kakao
}
